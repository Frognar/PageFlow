using System.Collections.Immutable;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AutomaticEndpoints.SourceGenerator;

[Generator]
public class EndpointRegistrationGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.CreateSyntaxProvider(
                predicate: static (node, _) => node is ClassDeclarationSyntax,
                transform: static (ctx, _) => (ClassDeclarationSyntax)ctx.Node)
            .Where(m => m is not null)
            .Where(m => m.AttributeLists
                .SelectMany(al => al.Attributes)
                .Any(a => a.Name.ToString() == "AutoEndpoint")
            );

        var compilation = context.CompilationProvider.Combine(provider.Collect());
        
        context.RegisterSourceOutput(compilation, Execute);
    }

    private void Execute(
        SourceProductionContext context,
        (Compilation Left, ImmutableArray<ClassDeclarationSyntax> Right) tuple)
    {   
        var theCode = """
                      // <auto-generated/>

                      using Microsoft.AspNetCore.Builder;

                      namespace AutomaticEndpoints;

                      public static class GeneratedEndpointExtensions
                      {
                          public static void RegisterEndpoints(this IEndpointRouteBuilder app)
                          {
                          
                      """;

        var (compilation, list) = tuple;

        foreach (var syntax in list)
        {
            var symbol = compilation
                .GetSemanticModel(syntax.SyntaxTree)
                .GetDeclaredSymbol(syntax) as INamedTypeSymbol;

            theCode += "\t" + symbol!.ToDisplayString() +".RegisterEndpoint(app);\n";
        }
        
        
        theCode += """
                       }
                   }
                   """;
        
        context.AddSource("GeneratedEndpointExtensions.g.cs", theCode);
    }
}